@model IList<SECU_CAMSPlus_DEV.Models.PrivateEscalation>

@{
    ViewBag.Title = "Create Escalation";
}
@if (TempData["ErrorESC"] != null)
{
    <script>
        $(document).ready(function () {
            //  $("#divSuccess").show();
            var msg = "@TempData["ErrorESC"]";
            alert(msg);
        });
    </script>

}

@if (TempData["NewTemplatefailMsg"] != null)
{
    <script type="text/javascript">
        alert('@TempData["NewTemplatefailMsg"]');
  
    </script>
}

<script language="javascript" type="text/javascript">
    function charonly() {
        var ascii = event.keyCode
        if ((ascii == 8 || ascii == 127) || (ascii > 64 && ascii < 91) || (ascii > 96 && ascii < 123) || (ascii == 32) || (ascii == 38)) {
            event.returnValue = true;
        }
        else {
            event.returnValue = false;
        }
    }

    function validateNumber() {
        var ascii = event.keyCode
        var key = window.event ? event.keyCode : event.which;

        if (ascii === 8 || ascii === 46
         || ascii === 37 || ascii === 39) {
            event.returnValue = true;
        }
        else if (key < 48 || key > 57) {
            event.returnValue = false;
        }
        else return true;
    };
</script>


<script>
    $(document).ready(function ()
    {
        var checkboxes = document.getElementsByTagName('input');

        for (var i = 0; i < checkboxes.length; i++) {
            if (checkboxes[i].type == 'checkbox') {
                checkboxes[i].checked = false;
            }
        }
        
        $('.table >  tbody  > tr').each(function (index) {
            debugger;


            var id = $(this)[0].id;

            if ($('#ddlPriority-' + id).val() == '1') {
                $("#ddlInterval" + id).prop("disabled", true);
                
            }


        });

        $('.ddlPrior').change(function () {
            
            var selectedid = $(this)[0].id;
            var array = selectedid.split("-");
            console.log(array);
            if ($(this).val() != "1") {
                $("#ddlInterval" + array[1]).prop("disabled", false);
             
            } else {
                $("#ddlInterval" + array[1]).prop("disabled", true);
                $("#ddlInterval" + array[1]).val('0')
                
            }
        });


        $("#btnAddnewtemplate").on("click", function () {
            debugger;
            var status = true;
            var errors = "";
            $('.table >  tbody  > tr').each(function (index) 
            {
                  var id = $(this)[0].id;
                  if ($("#txtcontactperson" + id).val() != "") {
                        if ($('#chksms' + id).prop('checked') == true) {
                            if ($("#txtcellno" + id).val() == "")
                            {
                                errors += "Mobile Number can not be blank. <br/>";
                                $("#txtcellno" + id).focus();
                                status = false;
                                return false;
                            }
                        }
                        if ($('#chkemail' + id).prop('checked') == true)
                        {
                            if ($("#txtemail" + id).val() == "") {
                                errors += "Email id can not be blank. <br/>";
                                $("#txtemail" + id).focus();
                                status = false;
                                return false;
                            }
                        }
                        if ($("#txtcellno" + id).val() != "")
                        {
                            var phone = $("#txtcellno" + id).val(),
                             intRegex = /^91[0-9]{10,12}$/;
                            if ((phone.length < 12) || (!intRegex.test(phone)))
                            {
                                errors += "Please enter a valid Mobile Number should be start with 91.<br/>";
                                $("#txtcellno" + id).focus();
                                status = false;
                                return false;
                            }
                        }

                        if ($("#txtTelno" + id).val() != "")
                        {
                            var phone = $("#txtTelno" + id).val(),
                            intRegex = /^[0-9]{10,12}$/;
                            if ((phone.length < 11) || (!intRegex.test(phone)))
                            {                                
                                errors += "Please enter valid Phone No. with STD code<br/>";
                                $("#txtTelno" + id).focus();
                                status = false;
                                return false;
                            }
                        }

                        if ($("#txtemail" + id).val() != "") {
                            var email = $("#txtemail" + id).val()
                            var pattern = /^([\w-\.]+@@([\w-]+\.)+[\w-]{2,6})?$/;
                            if (!pattern.test(email))
                            {
                                errors += "Please enter a valid Email Id.<br/>";
                                $("#txtemail" + id).focus();
                                status = false;
                                return false;
                            }
                        }
                    }
                
            });
            if (status == true) {
                $("form").attr('action', 'Create')
                $("form")[0].submit();

            }
            else {
                $('#divval').html(errors);
            }

        });



        $("#btnRefresh").on("click", function ()
        {
            debugger;
            //$('#divval').html('');
            $('.chk').attr('checked', false);
        });

    });
</script>


@using (Html.BeginForm("Create", "EscalationMaster", FormMethod.Post))
{
    <div class="col-lg-12 animated fadeIn margin-top">
        <div class="panel panel-yellow">
            <div class="panel-heading">
                <div class="row">
                    <div class="col-md-12">
                        <h2>Add New Escalation</h2>
                    </div>

                </div>
            </div>

            <div class="panel-body">
                <div id="divval" class="valiation"></div>
                <div class="row">

                    <div class="col-sm-2">
                        <p>Template Name : </p>
                    </div>
                    <div class="col-sm-3">
                        <div class="form-group">
                            @Html.TextBox("TemplateName", null, new { @class = "form-control",@onkeypress = "return charonly(event)" })
                        </div>
                    </div>
                </div>
                <hr />
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Name
                                </th>
                                <th>Comments
                                </th>
                                <th>Telephone No
                                </th>
                                <th>SMS
                                </th>
                                <th>Mobile No
                                </th>
                                <th>Email
                                </th>
                                <th>Email ID
                                </th>
                                <th>Priority
                                </th>
                                <th>Interval
                                </th>
                                <th>Repeat Interval (min.)
                                </th>

                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i <= Model.Count - 1; i++)
                            {
                                <tr id=@Model[i].EscPvtID>
                                    <td>
                                        @Html.HiddenFor(m => m[i].EscPvtID)
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m[i].Contact_Person, new { @class = "form-control required ", @id = "txtcontactperson" + @Model[i].EscPvtID })
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m[i].Comments, new { @class = "form-control required " })
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m[i].Tel_No, new { maxlength = 11,@onkeypress = "return validateNumber(event)", @class = "form-control required " , @id = "txtTelno" + @Model[i].EscPvtID })
                                    </td>
                                    <td>

                                        @Html.CheckBoxFor(m => m[i].SMSMarkBool, new { @class = "chk", @id = "chksms" + @Model[i].EscPvtID })
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m[i].Cell_No, new { maxlength = 12 , @onkeypress = "return validateNumber(event)",@class = "form-control required ", @id = "txtcellno" + @Model[i].EscPvtID })
                                    </td>
                                    <td>

                                        @Html.CheckBoxFor(m => m[i].EmailMarkBool, new { @class = "chk", @id = "chkemail" + @Model[i].EscPvtID })
                                    </td>
                                    <td>
                                        @Html.TextBoxFor(m => m[i].EmailID, new { @class = "form-control required ", @id = "txtemail" + @Model[i].EscPvtID })
                                    </td>
                                    <td>
                                        @Html.DropDownListFor(m => m[i].Priority,
                         new SelectList(ViewBag.lstpriority, "Value", "Text"), new {  @class = "form-control required ddlPrior",@id="ddlPriority-" + @Model[i].EscPvtID })

                                    </td>
                                    <td>
                                    @Html.DropDownListFor(m => m[i].Interval,
                         new SelectList(ViewBag.lstinterval, "Value", "Text"), new { @class = "form-control required",@id="ddlInterval" + @Model[i].EscPvtID })

                                    <td>
                                        @Html.DropDownListFor(m => m[i].RepeatInterval,
                         new SelectList(ViewBag.lstrepinterval, "Value", "Text"), new { @class = "form-control required",@id="ddlRepeatInterval" + @Model[i].EscPvtID })

                                    </td>
                                    <td></td>
                                </tr>
                                        
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="panel-footer text-center">
                <input class="btn btn-success btn-md" type="button" value="Add" id="btnAddnewtemplate" />
                <input class="btn btn-info btn-md" type="reset" value="Refresh" id="btnRefresh" />
                @Html.ActionLink("Cancel", "Index", "EscalationMaster", null,
                new { onclick = "return confirm('If you Exit now, the Escalation template will not be created?')", @class = "btn btn-warning btn-md" })

            </div>
        </div>
    </div>    
}


<script src="~/Scripts/jquery-2.0.3.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>
