@model SECU_CAMSPlus_DEV.Models.BrandHygieneSite
@{
    ViewBag.Title = "Add Site Details :: CAMSPlus";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@if (TempData["noticeAdd"] != null)
{
@*<script type="text/javascript">
        $(document).ready(function () {
            // debugger;
            $('#divSuccess').attr("style", "display:block");
            $("#divSuccess").show();
        });

    </script>*@// this script to show successslerts
    <div class="col-md-3 col-md-offset-9">
        <div class="alert alert-success alert-dismissible fade in AutoHide" style="display: block; margin: 15px 0 0 0;">
            <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
            @TempData["noticeAdd"]
        </div>
    </div>
}
@if (TempData["invalidmsgAdd"] != null)
{
@*<script type="text/javascript">
        $(document).ready(function () {
            // debugger;
            $('#divinvalid').attr("style", "display:block");
            $("#divinvalid").show();
        });
    </script>*@// this script to show successslerts
              
    <div class="col-md-3 col-md-offset-9">
        <div class="alert alert-danger alert-dismissible fade in AutoHide" style="display: block; margin: 15px 0 0 0;">
            <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
            @TempData["invalidmsgAdd"]
        </div>
    </div>
}



@using (Html.BeginForm("Create", "BrandHygieneSite", FormMethod.Post))
{ 
    @Html.AntiForgeryToken()

   
    
   
    
    <div class="col-lg-12 animated fadeIn margin-top">
        <div class="panel panel-yellow">
            <div class="panel-heading">
                <div class="row">
                    <div class="col-md-6">
                        <h2>Add Site Details</h2>
                    </div>

                    <div class="pull-right col-md-6">
                        <a class="btn btn-success btn-sm pull-right margin" id="btnlistui" href="Index">
                            <i class="fa fa-list"></i>Back to List  
                        </a>
                    </div>

                </div>
                <div class="clearfix"></div>
            </div>

            <div class="panel-body">
                <div class="row">
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.ClientID, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.ClientID, new SelectList(Model.ClientList as System.Collections.IEnumerable, "Value", "Text"), "---select---", new { @class = "form-control required", @id = "ddlClientID" })
                            @Html.ValidationMessageFor(m => m.ClientID, null, new { @class = "valiation", @id = "validationclientName" })
                            @Html.HiddenFor(m => m.ClientID)
                            @Html.HiddenFor(m => m.ClientName)
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.SiteID, htmlAttributes: new { @class = "control-label" })
                            @Html.TextBoxFor(m => m.SiteID, new { @class = "form-control required", @id = "txtSiteID", @onkeypress = "return charandnumbers('errorSiteID')" })
                            @Html.ValidationMessageFor(m => m.SiteID, null, new { @class = "valiation", @id = "errorSiteID" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.StateID, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.StateID, new SelectList(Model.StateList as System.Collections.IEnumerable, "Value", "Text"), "---select---", new { @class = "form-control required", @id = "ddlstate" })
                            @Html.ValidationMessageFor(m => m.StateID, null, new { @class = "valiation", @id = "validationState" })
                            @Html.HiddenFor(m => m.StateName)
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CityID, htmlAttributes: new { @class = "control-label" })
                            @Html.DropDownListFor(m => m.CityID, new SelectList(Model.CityList as System.Collections.IEnumerable, "Value", "Text"), "---select---", new { @class = "form-control required", @id = "ddlcity" })
                            @Html.ValidationMessageFor(m => m.CityID, null, new { @class = "valiation", @id = "validationCity" })
                            @Html.HiddenFor(m => m.CityName)
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>Pincode *</label>
                            @Html.TextBoxFor(m => m.Pincode, new { @class = "form-control required", @id = "txtPinCode", @maxlength = "6", @onkeypress = "return numbersonly('errorPincode')" })
                            @Html.ValidationMessageFor(m => m.Pincode, null, new { @class = "valiation", @id = "errorPincode" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>Site Address*</label>
                            @Html.TextAreaFor(m => m.SiteAddress, new { @class = "form-control required", @id = "txtSiteAdd", @onkeypress = "return charandnumbers('errorSiteAdd')" })
                            @Html.ValidationMessageFor(m => m.SiteAddress, null, new { @class = "valiation", @id = "errorSiteAdd" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>Site Location *</label>
                            @Html.TextAreaFor(m => m.SiteLandmark, new { @class = "form-control required", @id = "txtSiteLoc", @onkeypress = "return charandnumbers('errorSiteLoc')" })
                            @Html.ValidationMessageFor(m => m.SiteLandmark, null, new { @class = "valiation", @id = "errorSiteLoc" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>Site Name *</label>
                            @Html.TextAreaFor(m => m.SiteName, new { @class = "form-control required", @id = "txtSiteName", @onkeypress = "return charonly('errorSiteName')" })
                            @Html.ValidationMessageFor(m => m.SiteName, null, new { @class = "valiation", @id = "errorSiteName" })
                        </div>
                    </div>
                </div>
                <div class="row">

                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>HK Agency *</label>
                            @Html.DropDownListFor(m => m.HKAgencyID, new SelectList(Model.HKList as System.Collections.IEnumerable, "Value", "Text"), "---select---", new { @class = "form-control required", @id = "ddlHKAgencyID" })
                            @Html.ValidationMessageFor(m => m.HKAgencyID, null, new { @class = "valiation", @id = "ValidationHKAgency" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>MDN No *</label>
                            @Html.TextBoxFor(m => m.MDNNo, new { @class = "form-control required", @maxlength = "10", @id = "txtMDNNo", @onkeypress = "return numbersonly('errorMDNNo')" })
                            @Html.ValidationMessageFor(m => m.MDNNo, null, new { @class = "valiation", @id = "errorMDNNo" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>Antenna *</label>
                            @Html.DropDownListFor(m => m.Antenna, new SelectList(Model.AntennaList as System.Collections.IEnumerable, "Value", "Text"), new { @id = "ddlAntenna", @class = "form-control required" })
                            @Html.ValidationMessageFor(m => m.Antenna, null, new { @class = "valiation", @id = "ValidationAntenna" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>DVR Type *</label>
                            @Html.DropDownListFor(m => m.DVRType, new SelectList(Model.Dvrtypelist as System.Collections.IEnumerable, "Value", "Text"), "---select---", new { @id = "ddlDVRType", @class = "form-control required" })
                            @Html.ValidationMessageFor(m => m.DVRType, null, new { @class = "valiation", @id = "validationDVRType" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>DVR IP *</label>
                            @Html.TextBoxFor(m => m.DVRIP, new { @class = "form-control required", @id = "txtDVRIP", @maxlength = "15", @onkeypress = "return DVRIPCheck('erroDvrIP')" })
                            @Html.ValidationMessageFor(m => m.DVRIP, null, new { @class = "valiation", @id = "erroDvrIP" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>DVR User ID *</label>
                            @Html.TextBoxFor(m => m.DVRUserID, new { @class = "form-control required", @id = "txtDVRUserID", @maxlength = "12", @onkeypress = "return charonly('errorDVRUserID')" })
                            @Html.ValidationMessageFor(m => m.DVRUserID, null, new { @class = "valiation", @id = "errorDVRUserID" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>DVR Password *</label>
                            @Html.TextBoxFor(m => m.DVRPassword, new { @class = "form-control required", @id = "txtDVRPassword", @onkeypress = "return checkDvrPassword('errorDvrPassword')" })
                            @Html.ValidationMessageFor(m => m.DVRPassword, null, new { @class = "valiation", @id = "errorDvrPassword" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>DVR Port *</label>
                            @Html.TextBoxFor(m => m.DVRPort, new { @class = "form-control", @maxlength = "5", @id = "txtDVRport", @onkeypress = "return numbersonly('errorDvrPort')" })
                            @Html.ValidationMessageFor(m => m.DVRPort, null, new { @class = "valiation", @id = "errorDvrPort" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>DVR Channels *</label>
                            @Html.DropDownListFor(m => m.DVRChannel, new SelectList(Model.DvrChannelList as System.Collections.IEnumerable, "Value", "Text"), "---select---", new { @class = "form-control required", @id = "ddldvrchannel" })
                            @Html.ValidationMessageFor(m => m.DVRChannel, null, new { @class = "valiation", @id = "validationDvrChannel" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>HDD 1 Total Space *</label>
                            @Html.TextBoxFor(m => m.HDD1, new { @class = "form-control required", @id = "txtHDD1", @onkeypress = "return numbersonly('errorHDD1Total')" })
                            @Html.ValidationMessageFor(m => m.HDD1, null, new { @class = "valiation", @id = "errorHDD1Total" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>HDD 2 Total Space</label>
                            @Html.TextBoxFor(m => m.HDD2, new { @class = "form-control", @id = "txtHDD2", @onkeypress = "return numbersonly()" })
                        </div>
                    </div>
                </div>
                <hr />
                <div class="row">
                    <div class="col-md-6">
                        <label>Escalation Configuration </label>
                    </div>
                </div>
                <hr />
                <div class="row">
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>Email ID *</label>
                            @Html.TextBoxFor(m => m.EmailID, new { @type = "email", @id = "txtEmail", @class = "form-control required", @onkeypress = "return checkEmail('errorEmail')" })

                            @Html.ValidationMessageFor(m => m.EmailID, null, new { @class = "valiation", @id = "errorEmail" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">
                        <div class="form-group">
                            <label>Contact Name *</label>
                            @Html.TextBoxFor(m => m.ContactName, new { @type = "text", @id = "txtContactName", @class = "form-control required", @onkeypress = "return charonly('errorContactName')" })
                            @Html.ValidationMessageFor(m => m.ContactName, null, new { @class = "valiation", @id = "errorContactName" })
                        </div>
                    </div>
                    <div class="col-xs-12 col-sm-3 col-md-3">

                        <label>Mobile no *</label>

                    </div>
                    <div class="col-sm-3 col-md-4">
                        <div class="form-group">

                            <div class="col-xs-12 col-sm-3 col-md-1 textboxcountrycode">
                                @Html.TextBoxFor(m => m.CountryCode, new { @class = "form-control textboxmobileno", @disabled = "disabled" })
                            </div>
                            <div class="col-xs-12 col-sm-3 col-md-8">
                                @Html.TextBoxFor(m => m.ContactPhoneNo, new { @class = "form-control", @id = "txtPhone", @maxlength = "10", @onkeypress = "return numbersonly('errorContactNo')" })
                            </div>
                            <div class="col-xs-12 col-sm-3 col-md-8 textboxcountrycode">
                                @Html.ValidationMessageFor(m => m.ContactPhoneNo, null, new { @class = "valiation", @id = "errorContactNo" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                @*<div class="alert alert-danger" id="divinvalid" role="alert" style="display: none" align="Left">
                    @if (TempData["invalidmsgAdd"] != null)
                    {     
                        @TempData["invalidmsgAdd"]

                    }
                </div>

                <div class="alert alert-success" role="alert" id="divSuccess" style="display: none" align="Left">
                    @if (TempData["noticeAdd"] != null)
                    {      
                        @TempData["noticeAdd"]
                    }
                </div>*@
                <span id="progress" class="text-center" style="display: none;">
                    <img src="/images/ajax-loader.gif" alt="wiat" />
                    Wait..
                </span>
                <div class="text-center">
                    <input class="btn btn-success" type="submit" value="Save" id="AddSiteDetails" />
                    @*onclick="return confirm('Do you want to Add this Site Details?');" *@
                    <a class="btn btn-info" id="btnrefresh" href="Create">Reset</a>
                </div>
            </div>
        </div>
    </div>
}
@*   </div>*@

<script type="text/javascript">
    $(document).ready(function () {
        $('#ddlstate').change(function () {
            debugger;

            if ($('#ddlstate').val() != "") {
                $.ajax({
                    url: "bindCityList",
                    data: { stateid: $('#ddlstate').val() },
                    cache: false,
                    type: "POST",
                    success: function (data) {
                        $("#ddlcity").empty();
                        var markup = "<option value='0'>---select---</option>";
                        for (var x = 0; x < data.length; x++) {
                            markup += "<option value=" + data[x].Value + ">" + data[x].Text + "</option>";
                        }

                        $("#ddlcity").html(markup).show();
                    },
                    error: function (reponse) {
                        alert("error : " + reponse);
                    }
                });
            }
            else {
                $("#ddlcity").empty();
                var markup = "<option value='0' selected='selected'>---select---</option>";
                $("#ddlcity").html(markup).show();
            }
        });

        /// To Enable Confirmation box

        //$('#AddSiteDetails').click(function () {
        //    debugger;
        //    if ($('#ddlClientID').val() != "" || $('#txtSiteID').val() != "" || $('#ddlstate').val() != "" || $('#ddlcity').val() != "" || $('#txtPinCode').val() != "" || $('#txtSiteAdd').val() != "" || $('#txtSiteLoc').val() != "" || $('#txtSiteName').val() != "" || $('#ddlHKAgencyID').val() != "" || $('#txtMDNNo').val() != "" || $('#ddlAntenna').val() != "" || $('#ddlDVRType').val() != "" || $('#txtDVRIP').val() != "" || $('#txtDVRUserID').val() != "" || $('#txtDVRPassword').val() != "" || $('#txtDVRport').val() != "" || $('#ddldvrchannel').val() != "" || $('#txtHDD1').val() != "" || $('#txtHDD2').val() != "" || $('#txtEmail').val() != "" || $('#txtContactName').val() != "" || $('#txtPhone').val() != "") {
        //        var retVal = confirm('Do you want to Add this Site Details?');
        //        if (retVal == true) {
        //            return true;
        //        }
        //        else {
        //            return false;
        //        }
        //    }

        //});


        $('#ddlClientID').change(function () {
            $('#validationclientName').html('');
        });

        $('#ddlstate').change(function () {
            $('#validationState').html('');
        });

        $('#ddlcity').change(function () {
            $('#validationCity').html('');
        });

        $('#ddlHKAgencyID').change(function () {
            $('#ValidationHKAgency').html('');
        });

        $('#ddlAntenna').change(function () {
            $('#ValidationAntenna').html('');
        });

        $('#ddlDVRType').change(function () {
            $('#validationDVRType').html('');
        });

        $('#ddlDVRType').change(function () {
            $('#validationDVRType').html('');
        });

        $('#ddldvrchannel').change(function () {
            $('#validationDvrChannel').html('');
        });

    });




    //
</script>

<script>
    function charonly(id) {
        debugger;
        var ascii = event.keyCode
        if ((ascii == 8 || ascii == 127) || (ascii > 64 && ascii < 91) || (ascii > 96 && ascii < 123) || (ascii == 32) || (ascii == 38)) {
            $("#" + id).html('');
            event.returnValue = true;
        }
        else {
            event.returnValue = false;
        }
    }

    function charandnumbers(id) {
        debugger;
        var ascii = event.keyCode
        if ((ascii == 8 || ascii == 127) || (ascii > 64 && ascii < 91) || (ascii > 96 && ascii < 123) || (ascii == 32) || (ascii > 47 && ascii < 58)) {
            $("#" + id).html('');
            event.returnValue = true;
        }
        else {
            event.returnValue = false;
        }
    }

    function checkDvrPassword(id) {
        debugger;
        var ascii = event.keyCode
        if ((ascii == 8 || ascii == 127) || (ascii >= 64 && ascii < 91) || (ascii > 96 && ascii < 123) || (ascii == 32) || (ascii > 47 && ascii < 58)) {
            $("#" + id).html('');
            event.returnValue = true;
        }
        else {
            event.returnValue = false;
        }
    }

    function numbersonly(id) {
        debugger;
        var ascii = event.keyCode
        if (ascii > 47 && ascii < 58) {
            $("#" + id).html('');
            event.returnValue = true;
        }
        else {
            event.returnValue = false;
        }
    }

    function checkEmail(id) {
        debugger;
        var ascii = event.keyCode
        if ((ascii == 8 || ascii == 127) || (ascii >= 64 && ascii < 91) || (ascii > 96 && ascii < 123) || (ascii == 32) || (ascii > 47 && ascii < 58) || (ascii == 46)) {
            $("#" + id).html('');
            event.returnValue = true;
        }
        else {
            event.returnValue = false;
        }
    }


    function DVRIPCheck(id) {
        debugger;
        var ascii = event.keyCode
        if ((ascii > 47 && ascii < 58) || (ascii == 46)) {
            $("#" + id).html('');
            event.returnValue = true;
        }
        else {
            event.returnValue = false;
        }
    }

    var octet = '(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])';
    var ip = '(?:' + octet + '\\.){3}' + octet;
    var quad = '(\\[' + ip + '\\])|(' + ip + ')';
    var ipRE = new RegExp('^' + quad + '$');

    function validateIP(value) {
        if (ipRE.test(value)) {
            $("#errorDVRIP").html('');
            return true;
        } else {
            return false;
        }
    }


</script>

<script type="text/javascript">
    $(document).ready(function () {
        //$('#myModal').attr("display", "none");
        window.setTimeout(function () {
            $(".AutoHide").fadeTo(500, 0).slideUp(500, function () {
                $(this).remove();
            });
        }, 5000);
    });
</script>




